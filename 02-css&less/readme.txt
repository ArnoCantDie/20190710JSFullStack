提问：
    1，说一个从浏览器的地址栏输入url到页面显示，经历了哪些过程？
        DNS解析--->找到服务器--->建立连接--->http请求--->http响应--->浏览器解析渲染--->断开连接
    
    2，浏览器构架图？浏览器是多进程的吗？渲染引擎中主要有什么东西？
        进程（工厂）：当一个项目运行起来后，就会形成一个进程。进程是操作系统分配和调度资源的基本单位。
        线程（工人）：在一进程下面有N个线程，真正干活的是线程。
        协程（轻量级的线程）
        浏览器是多进程：通过一个浏览器，可以同时访问多个网站，一个网站挂了，不会影响其它网站。
    
        浏览器的内核：渲染引擎（CSS线程-->解析CSS，形成CSS树，HTML线程-->解析HTML，形成DOM树，JS线程）

        JS线程和CSS线程是互斥

    3，浏览器想要把一张没有js页面渲染出来，它是如何渲染的？

    5，说一下什么是http协议？（简单说一下，后面会详细讲）
        HyperText Transfer Protocol
        超文本（文字，样式，程序，连接，视频，音频...） 
        传输（客户端与服务器之间的数据交流） 
        协议（规则，学习http，就是学习这个规则，规则里面有很多头）

        还需要说一个各种头...

        HTTP协议是基于TCP协议。

    6，三次握手和四次挥手是发生什么时候？为什么握手是三次，挥手是四次？
        三次握手： 
        四次挥手：

    7，写html标签时，应该注意什么？
        不区分大小写，建议小写  
        单标签最好加关闭    <br />  
        双标签要正确嵌套，不要交叉    <h1><p></h1></p>
        双标签要正确关闭  <li><li>

    8，常用的发起http请求的方式有哪些？
        get:从服务器获取数据
        post:向服务器提交数据

--------------------------------------

CSS：Cascading Style Sheet 层叠样式表
作用：布局  美化  不管是布局还是美化，都是针对标签，需要选中某个标签，然后进行布局或美化。

CSS代码写的位置：
    开始标签里面:<div style="color: red;">div</div>  用的不多
    head标签里面：在head标签中写style标签，把css代码写在style标签中  基本不用
    外面：在外面建一个out.css文件，通过link标签引入就OK了。最最常用

选择器：用于选中某个标签。
    id   先给一个标签起一个名字，通过#idname来选中
    class
    p
    div p 
    h1,h2
    :hover
    *

传统写CSS的方法，没有什么规则，就一个劲往后写就OK了。没有一点约束，后期维护不方便。
现在主流写CSS会使用CSS预处理器。作用：就是让我们写CSS更加的简单，更加的规范，更加的好维护。

常用的CSS处理器：less、sass、stylus

图的标注：PS，像素大厨

对于字体的设置，是有继承性，也就是你对父标签设置了字体，那么子标签，也是继承这个属性。
对于继承生，a标签比较特殊，如果你要设置a标签的颜色，那么你需要定位到a标签。

快速格式化代码：alt+shift+f

总结：
    color：设置字体的颜色
    font-size：设置字体的大小
    font-weight：设置字体的粗细
    font-style：设置字体的是否倾斜
    font-family:设置什么类型的字体
    font:前面几个属性的复合属性
    -------------
    text-decoration:修饰钱
    text-indent:首行空两格
    text-align:文本的对齐方式
    line-height:行高

    上面的属性是具有继承性的。

盒子模型：
    相当重要。
    标签是矩形的，这个矩形的标签就是一个盒子，也就是说，我们一张网页，就是一个一个盒子堆起来。

    学习盒子模型也就是说需要学习几个属性，来设置这个盒子模型
    width 盒子内容宽度
    height 盒子内容高度
    padding  盒子的内边距（补白），盒子内容与盒子边框之间的距离，上下左右都有padding
    margin   盒子的外边距  盒子边框之外的距离，也分上右下左
    border 盒子的边框  盒子的边框也是有上边框，右边框，下边框，左边框
    background  盒子背景  背景默认情况下会填充内容和padding

对于盒子模型的注意点：
    1，对于女标签来说，width和height设置无效
    2，width属性默认值为auto，块元素的贪婪性和行内元素的懒惰性。
    3，对于行内元素而言，其宽度有内容本身决定，而其高度则有font-size决定。
    4，有些标签有默认的padding值，如ul、ol等。*{padding:0}
    其它盒子模型中的细节，下午说。

男标签：可以设置盒子模型的6大属性。

总结上午的内容：
    1，CSS     选择器   一堆的CSS属性
    2，关于字体和文本的属性   继承性
    3，less  ----> 至少我们现在要知道less可以嵌套着写css代码
    4，less环境   less.js   
    5，盒子模型

    任务：消化，像素大厨

CSS调试面板：
    查看样式：样式分成了好几块
        第一块：不用管
        第二块：针对div写的独有样式，可以通过打勾与否让写是否起作用
        第三块：user agent stylesheet  标签的默认样式
        第四块：inherited from xx  继承的属性 
        在查看面板中，如果一个属性上面有个删除线，表示这个属性不起作用
    
    修改样式（临时性）：
        数值值是数字
        颜色：单词，颜色面板，十六进制
        字符串
    
    让某个样式是否起作用
        打勾
        我们自己写的样式的优先级是高于继承过来的样式的

选择器（60多个）：
    p 
    class 
    id 
    div p 
    h1,h2 
    :hover 暂时就在a标签上使用  当鼠标放上去的时候选中
    *  选中所有的标签   *{margin:0; padding:0;}
    div.box  交集选择器

选择器优先级（层叠性）：
    1： 自已写的 > 继承过来的
    2： 行内 > 内部    行内 > 外部   内部和外部的优先级一样（就近原则，内部和外部的选择器是一样的）
        行内 > 内部=外部（就近原则，选择器要一致）> 默认的
    3： ID > class > div 
    4： 权重  ID：0100    class: 0010    div: 0001  哪个钱多就用哪个
    5:  important 

CSS的两大特性：层叠性，继承性

有些标签有默认的样式，这些样式很多我们不需要，我们需要给它重置，一般叫reset，网上有
很多的reset.css。

有些常用的样式，我们会写到commont.css中，用的时候，直接使用commont.css中的类就OK了。

盒子模型(布局，美化)：  
    六大属性来调整盒子模型

margin:盒子与盒子之间的距离  分上，下，左，右四个方向的margin
    1个值  2个值  3个值  4个值
    有些标签有默认的margin   *{margin:0}   *可以有人不会用  
    margin-top   margin-right  margin-bottom  margin-left 
    应用：*{margin:0}   水平居中  网站顶部背景100%宽  版心最新版居中
    margin对于男标签在四个方向上都有作用，对于女标签，只在水平方向上有效，在垂直方向上无效
    margin重叠（塌陷）：
        2个前提：男标签，垂直方向
        兄弟元素之间的重叠：上面盒子的下margin和下面盒子的上margin重叠，中间的margin大小是取大优先
            解决重叠：  
                方法1：给男的变成不男不女的
                方法2：浮动（浮动元素是不会塌陷的）
        父子元素之间的重叠：父元素设置margin-top和父中第一个子元素设置的margin-top会重叠
            解决重叠：
                方法1：给父元素设置border-top   不想要边框，使用transparent
                方法2：给父元素设置padding-top 
                方法3：给男的变成不男不女的
    margin可以设置负值：


border:设置盒子的边框  
    border:粗细 线型 颜色   border:1px solid red;
    border-top   border-right  border-bottom   border-left  
    border-width   border-style   border-color
    border-top-width  xxx  
    border在页面是占空间的
    border可以实现小三角

padding:
    内边距，补白   内容与border之间的距离
    有些标签有默认的padding   *{padding:0;}
    1个值  2个值  3个值  4个值
    应用：调整内容与border之间的间隙  
    padding在页面是占空间的

content:　内容的宽度和高度
    width:
    height：
    男标签可以设置宽度和高度，女标签不能设置宽度和高度
    女标签它的宽度由内容决定，高度由font-size决定 
    width和height可以设置百分比，是父元素的百分比。

background:
    background-color:
    background-image:
        1，默认水平和垂直方向都会平铺
        2，如果空间不足，图片也会显示，只是显示不完整
        3，url后面的路径引号可加可不加
        4，背景图片默认会填充border,padding,content
    background-repeat:
    background-position:
    background-attactment:



流式布局（标准文档流）：默认布局方案  不给力
    从上向下，从左到右进行布局
    男盒子独占一行，女盒子并排显示，女盒如果一行撑满了，自动换行。
    国家：规定

浮动布局：让男标签可以并排显示
    如果一个元素浮动了，就相当于这个元素出国，对就产生很我影响
    影响1：元素出国了，父元素里面就相当于没有内容，它的高度就变成0了，也就父元素高度塌陷了。元素浮动会造成父元素的高度塌陷。
           可以清楚这个影响：overflow:hidden;  overflow本意就是处理溢出，我们可以使用overflow的这个小偏方，消除父元素的塌陷。
    如果一个元素浮动了，那么这个元素内部还是按流式布局进行布局（内部也是一个标准文档流）。

小间隙有如下几种处理办法：
    1，加margin-left  可以给里面的li加，也可以给nav加
    2，加空格  &nbsp;
    3，加padding 可以给nav加  能不能给li加padding　？　

display: 显示，展示
    变性手术
    display:block 让一个标签变成男标签（块级元素）
    display:inline 让一个标签变成女标签（行内元素）
    display:inline-block  让一个标签变成不男不女标签（行内块元素）
    display:none  可以让一个元素不显示出来

男标签：独占一行，可以设置宽度  男标签要想并排显示---->float
女标签：并排显示，不可以设置宽度
不男不女的标签：并排显示，可以设置宽度   img   input


今天的作业：
    1，盒子模型
    2，浮动布局
    3，实现利牛网中四大模块的并排显示



提问：
    1，什么是盒子模型？
        一个标签就是一个盒子，可以通过6大属性来设置这个盒子。
        有margin，border,padding，widht，height，bg。标签分男标签和女标签。
        对于男盒子来说，6大属性都有作用。对于女盒子来说，widht，height不起作用，
        padding 和 margin在水平方向上有作用，在垂直方向上没有作用。margin的重叠问题。
        ......

    2，如何计算盒子模型在网页上占据的大小？ 这种盒子模型有什么不好的地方？
        在网页上占据的宽度：左右的margin+左右的border+左右的padding+width
        在网页上占据的高度：上下的margin+上下的border+上下的padding+height
        如果一个div没有设置widht，它占父元素的100%。假如我的父元素是960px。div也占
        960px。div的这个960是指div的内容宽度还是指它在页面上占据的空间？
        960px = 左右的margin+左右的border+左右的padding+width
        这里面的div占960是指div所占用的空间。那如果我把这个div又加了一个10px的边框。
        那么这个div的内容宽度width = 960-20px = 940px 

        为什么不好？
            如果一个男盒子没有设置宽度，它的宽度是父元素的100%，这里的100%是指这个盒子所占页面宽度。
        如果又增加了这个盒子的margin,padding,border，那么这个盒子的内容宽度一定会减小，如果margin,padding,border
        不断地增加，盒子的内容宽度不断地被压缩，如果压缩到了极限，浏览器会强迫你元素的宽度增加。
        所以默认情况下的盒子模型也有不足之处。
        

        <div></div>

    3，知道什么是margin的重叠吗？ 说一下
        重叠前提：男   垂直 
        兄弟元素之间的重叠：
            上盒子的margin-bootom和下盒子的margin-top 会重叠  ---> 取大优先 
            解决： 男-->非男   浮动   设置一方盒子margin，不要两个都设置
        父子（第1个子或最后1个子）元素之间的重叠： 
            父的margin-top 和 子的margin-top   ---> 取大优先  
            父的margin-bottom 和 子的margin-bottom    ---> 取大优先 
            解决： 男-->非男  border  padding

    4，如何实现一个小三角？
        border:5px solid tranparent;
        border-top:5px solid red;

    5，常见的布局方案有哪些？
        流动布局：遵循标准文档流（国家）
            男  女
        浮动布局：出国  如果一个元素浮动了，那么这个元素内部还是遵循标准文档流（国家）
            float:left/right 
        层布局（定位）：
        flex布局：
    6，标签的分类，各自的特点？
        男: div h1 p li form table    6大属性都起作用
        女: a  span  em  storng    width和height不起作用  margin和padding在垂直方向上不起作用
        不男不女： img input   除了并排显示，其它和男的一个

--------------------------------
CSS中核心：盒子  浮动   flex 

浮动： 默认的流式布局有不足。 浮动的目的就是为了让男标签可以并排显示。
格式：float: left / right / none     none默认的不浮动

特点：
    0，浮动初衷是为了实现字围（新闻），后面才发现，浮动可以让多个男标签并排显示。
    1，在一个父元素内部，如果一个元素浮动了，那么它就脱离了标准文档流，后面的元素就让向上排
    2，浮动并没有完全地脱离了标准文档流（破坏性--->flex），如果后面的元素内部有文字，这些文字会环绕在浮动元素的周伟，产生字围。
    3，如果多个元素浮动了，那么这们就会并排显示，如果都是同一个方向的浮动，它们会紧紧地贴在一起。
    4，如果一个元素浮动了，先向上移动，直到贴靠到父元素的边界，接着，如果是左浮动，就向左移动，直到移动到父元素的左边界，如果是向右浮动，就向右移动，直接移动到父元素的右边界。
    5，如果一个元素没有设置高度，它的高度是靠里面的内容撑起来的。如果父元素内部元素都浮动了，那么会造成父元素的高度塌陷。
    6，如果元素浮动了，那么它会造成影响：造成父元素高度塌陷。解决:显示加高度（加高法）  小偏方（overflow:hidden）
    7，如果元素浮动了，它也会造成对后面的兄弟元素影响。解决：clear:both/left/right 
    8，应用：实现左右布局  小导航   多个规则盒子水平排列（行内块）
    9，当一个浮动起来的男盒子，没有设置width，那么这个盒子的宽高会尽可能小，小到包裹住它里面的内容，这叫包裹性，
    10，如果一个元素浮动了，它会悄悄地做一个变性手术。如果一个女盒子浮动了，那么就可以设置宽高了，相当于把它变成男标签。
    11，如果父元素也浮动了，那么就不会出现高度塌陷了。
    12，如果有左浮动，又有右浮动，那么你需要把右浮动的元素写在左左浮动的前面    ?? 
    13，写三个盒子，利用27种情况去讨论最后的显示。
    14，浮动元素会从标准文档流中半脱离出来。证明：字围
    15，一个元素浮动了，那么它也是受父元素的控制。当父元素宽度变小时，装不下所有的子元素时，后面的子元素有贴靠性。当父元素小到极限时，里面的浮动的子元素宽度是不会改变的。


元素浮动会造成影响（清除浮动）：
    1，对父元素造成的影响
        父元素高度塌陷
            解决：显示加高度（加高法）  小偏方（overflow:hidden）  clear:both 
                加高法：简单   基本不用   大部分情况情况下，父元素的高度是需要子元素撑起来
                overflow:hidden : 简单  使用了overflow:hidden 父元素的高度会随着子元素的高度变化而变化    overflow:hidden本职工作是用来处理溢出  在使用过程中，需要注意子元素如果想要超出父元素高度，此时overflow:hidden就不适合了。
                clear:both 在所有子元素后面加一个空的div 在这个div上面加clear:both  ---> 内qiang法
                    优点：clear:both专业清除浮动的  缺点：多写一个代码
    2，对后面兄弟元素造成的影响
        兄弟元素会向上移动
            解决：在受影响的元素上面的加 clear:both

    项目中最常用清除浮动的方法： 利用伪元素   after 
        说白了，就是写一个清除浮动的类，如下：
        .clear:after{content=""; display:block; clear:both; height:0; overflow:hidden;}



由于浮动具有破坏性，所以后面就有一个新的布局方案，叫flex布局。

今日作业：
    1，浮动的27种情况小练习

---------------------
层布局（定位）：position    background-position  定位是完全脱离标准文档流的一种布局方案
    相对定位：relative
        参考点：是盒子本身它应该出现的位置
        应用：局部的细节调整   作为绝对定位的参考点
    绝对定位：absolue
        参考点：根据设置的参考点（position: relative; ）进行定位
        它会向上找参考点，找到就以这个参考点为主，找不到，就一直向上找，直接到body,如果body也没有设置参考点，那么就以body为参考点
        绝对定位由于它完全脱离了标准文档流，它可能发现覆盖，可能通过z-index改变先后顺序，z-index的值越大，越靠前
        如果一个span绝对定位了，那么它就变成块级了，就可以设置宽度。
        父相子绝
        应用： 在一个盒子上，放一个小盒子
    固定定位：flxed
        参考点：视窗
    static: 
        不定位 默认的 
    不管是什么类型的定位，都需要设置偏移量。top,right,bootom,left

-----------------------------------
flex ----> 干掉了float  
    四大概念：
        容器，项目，主轴，交叉轴 

容器：如果在一个盒子上面，设置display:flex，那么这个盒子就是一个容器
项目：容器的直接子元素，叫项目
主轴：在容器中，项目默认是按主轴方向排列，默认是从左向右排列
交叉轴：与主轴垂直的那个轴

容器相关的属性：
    flex-direction：改变主轴方向  row   column  row-reverse  column-reverse 
    flex-wrap:项目足够多的时候，是否换行  wrap  nowrap
    * flex-flow:flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap
    justify-content:处理富余空间  flex-start  flex-end   center   space-between  space-around
    align-items: 定义项目在交叉轴上如何对齐  flex-start  flex-end   center
    align-content : 当有多根主轴时，多根主轴的对齐方式。相当于处理垂直方向上的富余空间。

项目相关的属性：




















